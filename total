IOS
0、Blog
斯坦福大学公开课【http://open.163.com/ocw/#computer】
objc中国【http://objccn.io】
iOS wiki【http://www.ios-wiki.com/】
博客列表【https://github.com/tangqiaoboy/iOSBlogCN】
我所收集的iOS-Blog ［http://www.jianshu.com/p/43d77227499a］
南峰子【http://southpeak.github.io/】
唐巧【http://blog.devtang.com】
gf&zjの盗梦空间【http://www.gfzj.us】
王巍【http://onevcat.com】
玉令天下【http://yulingtianxia.com】
破船之家【http://beyondvincent.com】
Draveness【http://draveness.me】
土土哥【http://tutuge.me】
Casa Taloyum【http://casatwy.com 】
Glow 技术团队【http://tech.glowing.com/cn/】
谌炫（ChenXuan）【http://www.samirchen.com】
程序员头条【http://www.90159.com】
Ted【http://wufawei.com】
张不坏【http://zhangbuhuai.com】
WeiFocus［http://grayluo.github.io/WeiFocusIo/］
IOS-Tips［http://www.jianshu.com/collection/3d5e6c79fd80］
bang's blog[http://blog.cnbang.net]
SUNNYXX[http://blog.sunnyxx.com]

1、Runtime【http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/,http://blog.csdn.net/wzzvictory/article/details/8615569】
1.1、内存管理
ARC什么情况下会出现内存泄漏？［https://www.zybuluo.com/MicroCai/note/67734］
在 iOS 4.2 时，苹果推出了 ARC 的内存管理机制。这是一种编译期的内存管理方式，在编译时，编译器会判断 Cocoa 对象的使用状况，并适当的加上 retain 和 release，使得对象的内存被合理的管理。所以，ARC 和 MRC 在本质上是一样的，都是通过引用计数的内存管理方式。
Toll-Free Bridge是什么？［http://gracelancy.com/blog/2014/04/21/toll-free-bridging/,http://blog.csdn.net/weiwangchao_/article/details/7744972］
1.2、Objective-C Runtime
【http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/】
【http://southpeak.github.io/blog/2014/10/25/objective-c-runtime-yun-xing-shi-zhi-lei-yu-dui-xiang/】
用Runtime的手段填充任意NSObject对象的nil属性【http://tutuge.me/2015/07/08/fill-nil-property-of-object/】
1.3、Method Swizzling
Method Swizzling 和 AOP 实践【http://tech.glowing.com/cn/method-swizzling-aop/】
Objective-C Runtime 运行时之四：Method Swizzling【http://southpeak.github.io/blog/2014/11/06/objective-c-runtime-yun-xing-shi-zhi-si-:method-swizzling/】
Objective-C Method Swizzling 的最佳实践【http://blog.leichunfeng.com/blog/2015/06/14/objective-c-method-swizzling-best-practice/】
动态修改UINavigationBar的背景色【http://tech.glowing.com/cn/change-uinavigationbar-backgroundcolor-dynamically/】

2、Foundation
2.1、Category与Extension的区别［http://blog.csdn.net/yhawaii/article/details/6992094，http://blog.csdn.net/hherima/article/details/44242469］
category可以定义变量吗？什么时候用extension？OC类可以定义私有方法么，如果不行，怎么在外部隐藏类方法？

2.2、category和继承［http://www.cnblogs.com/ziyesky/p/4140532.html］

2.3 、strong和weak［http://www.zhihu.com/question/20350816］
weak和assign，retain和copy

2.4、unsafe_unretained的对象释放会出现什么问题？［http://blog.csdn.net/devday/article/details/7023322］

LcCategoryProperty

2.5、iOS开发中的类簇设计模式［http://git.devzeng.com/blog/ios-class-cluster-design-pattern.html］

NSString类型的属性用strong还是copy修饰［http://pandajohn.com/nsstringlei-xing-de-shu-xing-yong-stronghuan-shi-copyxiu-shi/］


3、UIKit
3.1、load和initialize的区别【http://www.cnblogs.com/ider/archive/2012/09/29/objective_c_load_vs_initialize.html】
3.2、View绘制
绘制像素到屏幕上【】
3.3、View Lifecycle
iOS中的View Controller Lifecycle【http://www.samirchen.com/view-controller-lifecycle-in-ios/】
layoutSubviews【http://dorisgit.github.io/2015/08/05/autolayout/】
3.4、AutoLayout
深入理解Auto Layout 第一弹【http://zhangbuhuai.com/2015/07/16/beginning-auto-layout-part-1/】

instancetype:
①instancetype可以返回和方法所在类相同类型的对象，id只能返回未知类型的对象；
②instancetype只能作为返回值，不能像id那样作为参数，比如下面的写法

3.4、iOS Events and Responder Chain
iOS事件分发机制[http://suenblog.duapp.com/blog/100031/iOS事件分发机制（一）%20hit-Testing]
事件传递：响应链[https://yishuiliunian.gitbooks.io/implementate-tableview-to-understand-ios/content/uikit/132event-chains.html]
深入浅出iOS事件机制[http://zhoon.github.io/ios/2015/04/12/ios-event.html]
所以关于事件的链有两条：事件的响应链；Hit-Testing 时事件的传递链。
响应链：由离用户最近的view向系统传递。 initial view –> super view –> …..–> view controller –> window –> Application –> AppDelegate
Hit-Testing 链：由系统向离用户最近的view传递。 UIKit –> active app's event queue –> window –> root view –>……–>lowest view

3.5、UIScrollView 实践经验[http://tech.glowing.com/cn/practice-in-uiscrollview/]
3.5.1、理解UIScrollView的三个属性：contentOffset、contentSize以及contentInset[http://pandajohn.com/jin-bu-li-jie-uiscrollviewde-san-ge-shu-xing-contentoffset-contentsizeyi-ji-contentinset/]
光栅化：在drawRect：方法被调用前，会为视图创建一个空白的图片来绘制content。该图片的坐标系统是视图的bounds。视图默认的bounds是{0，0，width，height}，超出该范围的部分会被舍弃。
组合：	

3.6、AutoLayout
Virtual Format Language
- (void)setTranslatesAutoresizingMaskIntoConstraints:(BOOL)flag NS_AVAILABLE_IOS(6_0);	
contentHugging & contentCompression
高斯模块

3.7、【iOS程序启动与运转】- RunLoop个人小结［http://www.jianshu.com/p/37ab0397fec7］



4、Core API
4.1、Core api[http://blog.csdn.net/kingsley_cxz/article/category/1474043]
4.1.1、Core Graphics之CGContext详解［http://blog.csdn.net/kingsley_cxz/article/details/9191479］
 

4.1.2、Quartz 2D编程指南[http://southpeak.github.io/blog/2014/11/10/quartz-2dbian-cheng-zhi-nan-zhi-%5B%3F%5D-:gai-lan/]
iOS绘图教程［http://www.cnblogs.com/xdream86/archive/2012/12/12/2814552.html］

4.2、Animation
4.2.1、ios核心动画高级技巧［https://zsisme.gitbooks.io/ios-/content/index.html］
如果没有自定义绘制的任务就不要在子类中写一个空的-drawRect:方法?
记住当对图层做变换的时候，比如旋转或者缩放，frame实际上代表了覆盖在图层旋转之后的整个轴对齐的矩形区域，也就是说frame的宽高可能和bounds的宽高不再一致了
但是如果是更加复杂一点的图形，UIBezierPath类会更合适，它是一个由UIKit提供的在CGPath基础上的Objective-C包装类
Core Animation在每个run loop周期中自动开始一次新的事务
我们知道Core Animation通常对CALayer的所有属性（可动画的属性）做动画，但是UIView把它关联的图层的这个特性关闭了

4.2.2、iOS开发系列--让你的应用“动”起来［http://www.cnblogs.com/kenshincui/p/3972100.html］
使用图层精简非交互式绘图，如何通过核心动画创建基础动画、关键帧动画、动画组、转场动画



5、Thread
5.1、NSOperationQueue
iOS 并发编程之 Operation Queues【http://blog.leichunfeng.com/blog/2015/07/29/ios-concurrency-programming-operation-queues/】
Cocoa深入学习:NSOperationQueue、NSRunLoop和线程安全［http://blog.cnbluebox.com/blog/2014/07/01/cocoashen-ru-xue-xi-nsoperationqueuehe-nsoperationyuan-li-he-shi-yong/］

5.2、GDC
5.2.1、GCD 深入理解［https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md］
任务：本教程中你可以将任务设定为一个 Objective-C 的 Block  。实际上，你也可以在 GCD 上使用函数指针，但在大多数场景中，这实际上更难于使用。Block 就是更加容易些！
线程：线程不安全的代码在某个时刻只能在一个上下文中运行
Queues 队列：Serial Queues 串行队列和Concurrent Queues 并发队列，GCD 提供给你至少五个特定的队列：：主队列（串行）、四个全局调度队列（并行）
dispatch_after：最好坚持使用主队列
dispatch_barrier_async：是在前面的任务执行结束后它才执行，而且它后面的任务等它执行完成之后才会执行（唯一像样的选择是自定义并发队列）
dispatch_group_async：
dispatch_apply：
dispatch_async()和dispatch_sync()  ：Block 会被异步地提交，意味着调用线程地执行将会继续。dispatch_sync 添加任务到一个队列并等待直到该任务（并不是该任务所处的线程）完成。dispatch_async 做类似的事情，但不同之处是它不会等待任务的完成，而是立即继续“调用线程”的其它任务。


GCD dispatch threads don't have run loops


5.3、Block
block没那么难［https://www.zybuluo.com/MicroCai/note/51116］
为什么用__block来修改

5.4、NSTimer
NSTimer使用小记[https://www.mgenware.com/blog/?p=459]

5.6、KVO和KVC
kvo将导致+initialize 执行多次
[深入浅出Cocoa]详解键值观察（KVO）及其实现机理[http://blog.csdn.net/kesalin/article/details/8194240]


8、持久化
8.1、用 SQLite 和 FMDB 替代 Core Data［http://objccn.io/issue-4-3/］




9、HTTP
9.1、AFNetworking2.0源码解析［http://blog.cnbang.net/tech/2320/］
9.2、使用Etag增强iOS的URL缓存功能［http://www.shiningio.com/2014/04/12/ios-url-cache-with-etags/］




10、应用架构
10.1、性能优化
iOS 程序性能优化【http://www.samirchen.com/ios-performance-optimization/】
10.1、iOS crash后的调试方法？还有用户的错误日志，如何找到出错的代码地址？iOS工具的一些使用？

10.2、如何定位Obj-C野指针随机Crash(一)：先提高野指针Crash率［http://bugly.qq.com/blog/?p=335］

10.2、iOS应用架构谈开篇【http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html】

10.3、NSProxy【http://tutuge.me/2015/02/16/利用NSProxy实现消息转发-模块化的网络接口层设计-原创/】
10.4、网络层【http://blog.cnbluebox.com/blog/2015/05/07/architecture-ios-1/】

如何通过友盟分析发布后App崩溃日志【http://blog.csdn.net/totogo2010/article/details/39892467】

LWConnetionDemo-master

更轻量的 View Controllers【http://objccn.io/issue-1-1/】

iOS 用户行为统计代码的剥离[https://www.zybuluo.com/MicroCai/note/131655]
ios 打点

勘误1：其实在viewWillAppear这里改变UI元素不是很可靠，Autolayout发生在viewWillAppear之后，严格来说这里通常不做视图位置的修改，而用来更新Form数据。改变位置可以放在viewWilllayoutSubview或者didLayoutSubview里，而且在viewDidLayoutSubview确定UI位置关系之后设置autoLayout比较稳妥。另外，viewWillAppear在每次页面即将显示都会调用，viewWillLayoutSubviews虽然在lifeCycle里调用顺序在viewWillAppear之后，但是只有在页面元素需要调整时才会调用，避免了Constraints的重复添加。
11.2.8.1、有个需求请教下，在网速不可连接时全部的view（无论是tableView，webview，或是其它自定的view）要统一显示一个提示页面，上面有重点重新连接的button,请问怎么设计比较好？
command模式。这些view都应该写一个switchToType的方法。网络失败的话就由controller调用view的这个方法去切换view的展示。









